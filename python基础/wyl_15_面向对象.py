"""
基本概念：
    1、过程：类似于函数，只能执行，但是没有返回值
    2、函数：不仅能执行，还可以返回结果

面向过程：
    1、把完成某一个需求的所有步骤， 从头到尾 逐步实现
    2、根据开发需求、将某些功能独立的代码 封装 成一个又一个 函数
    3、最后完成的代码、就是顺序地调用 不同的函数

    特点：
        1、注重 步骤与过程 ，不注重职责分工
        2、如果需求复杂，代码会很复杂
        3、开发复杂项目，没有固定的套路，开发难度大

面向对象：
    相比较函数、面向对象是 更大 的 封装、根据职责 在 一个对象 封装 多个方法
    1、在完成某一个需求前，首先是确定 职责 --- 要做的事情（方法）
    2、根据 职责 确定不同的 对象，在对象内部封装不同的方法（多个）
    3、最后完成的代码，就是顺序地让 不同的对象 调用不同的方法

    特点：
    1、注重 对象和职责，不同的对象承担不同的职责
    2、更加适应应对复杂的需求变化，是专门应对复杂项目开发，提供的固定套路
    3、需要在面向过程基础上，在学习一些面向对象的语法

类：
    1、是对一群具有相同 特征 或者 行为的事物的一个统称、是抽象的 不能直接使用
        特征 被称为 属性 （变量）
        行为 被称为 方法
    2、类相当于制造飞机的图纸，是一个模板，是负责创建对象的

对象：
    1、是由 类 创建出来的一个具体存在，可以直接使用
    2、由 哪一个类 创建出来的 对象、就拥有在 哪一个类 中定义的：
        属性
        方法
    3、对象就相当于用 图纸 制造的飞机

在程序开发中，应该是先有类，再有对象

类和对象的关系：
    1、类是模板，对象是根据类这个模板创建出来的，应该是先有类，再有对象
    2、类只有一个 ，对象可以有多个
        不同的对象之间的属性可能会有不同
        类中定义了什么属性，对象就有什么属性和方法，不可能多，也不可能少

类的设计：
    1、首先需求分析，确定一下，程序需要包含哪些类
        1、类名，满足大驼峰命名法
        2、属性 这类事物具有什么样的特征
        3、方法 这类事物具有什么样的行为、
    
    2、类名的确定：名词提炼 分析 整个业务流程，出现的 名词，通常就是找的类
    3、属性和方法的确定
        对 对象的特征描述，通常可以定义成属性
        对象具有的行为（动词），通常可以定义成方法


面向对象的基本语法：
    1、dir内置函数
        在python中 对象几乎无处不在，我们之前的学习的变量、数据、函数都是对象
        两个方法验证：
            1 在标识符/数据后输入一个.,然后按下 TAB 键，ipython会提示对象调用的方法列表
            2 使用内置函数dir传入标识符/数据，可以查看对象内的所有属性和方法
        提示_方法名_ 格式的方法是python提供的内置方法/属性，稍后会给大家介绍一些常用的内置方法/属性
            序号        方法名      类型      作用
            01         __new__     方法        创建对象时，会被自动调用
            02         __init__    方法        对象被初始化时，会被自动调用
            03         __del__     方法        对象被从内存中销毁前，会被自动调用
            04         __str__     方法        返回对象的描述信息，print函数输出时使用

        利用好 dir()函数，在学习很多内容就不需要死记硬背了 ， 通过dir查询对象的方法和属性
"""